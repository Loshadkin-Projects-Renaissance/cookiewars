

def createrare(id):
    x = randomgen(id)
    return createunit(name='–†–µ–¥–∫–∏–π —Å–ª–∏–∑–Ω—é–∫', id=-300, identeficator=x, weapon='sliznuk', hp=10, maxhp=10,
                      damagelimit=999)


def createlava(chatid, id='lava'):
    x = randomgen(chatid)
    text = '–ê–ª–º–∞–∑–Ω—ã–π –≥–æ–ª–µ–º'
    hp = 4
    return createunit(id=id, weapon='lava', name=text, hp=hp, maxhp=hp, animal=None, identeficator=x, damagelimit=15)


def createpauk(id, hp):
    for ids in games:
        if id in games[ids]['bots']:
            id2 = games[ids]['chatid']
    x = randomgen(id2)
    t = users.find_one({'id': id})
    text = '–ü–∞—É–∫[' + t['bot']['name'] + ']'
    return createunit(id=id, name=text, weapon='bite', hp=hp, maxhp=hp, damagelimit=7, identeficator=x)


def createdouble(id, ids):
    x = randomgen(id)
    text = '–î–≤–æ–π–Ω–∏–∫[' + ids['name'] + ']'
    return createunit(id=ids['id'], name=text, weapon=ids['weapon'], hp=ids['hp'], maxhp=ids['hp'],
                      skills=ids['skills'], skin=ids['skin'],
                      damagelimit=ids['damagelimit'], energy=ids['maxenergy'], maxenergy=ids['maxenergy'],
                      identeficator=x, shockcd=0)


def createmonster(id, weapon, hp, animal):
    for ids in games:
        if id in games[ids]['bots']:
            id2 = games[ids]['chatid']
    x = randomgen(id2)
    t = users.find_one({'id': id})
    text = '–ö–æ—à–º–∞—Ä–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ[' + t['bot']['name'] + ']'
    return createunit(id=id, weapon=weapon, name=text, hp=hp, maxhp=hp, animal=animal, identeficator=x, damagelimit=2)


def createsniper(chatid, id='sniper'):
    x = randomgen(chatid)
    text = '–ó–æ–º–±–∏-—Å–Ω–∞–π–ø–µ—Ä'
    hp = 1
    return createunit(id=id, weapon='rifle', name=text, hp=hp, maxhp=hp, animal=None, identeficator=x, damagelimit=1,
                      zombie=6)


def createboss(chatid, id=441399484):
    x = id
    text = '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–µ—á–µ–Ω—å—è'
    hp = 13
    return createunit(id=id, weapon='cookie', name=text, hp=hp, maxhp=hp, animal=None, identeficator=None,
                      damagelimit=10,
                      skills=['cookiegolem', 'cookiegun', 'cookiecharge', 'cookieclone', 'trap'])


def randomgen(id):
    i = 0
    text = ''
    while i < 4:
        print('cycle')
        text += random.choice(symbollist)
        i += 1
    no = 0
    for ids in games[id]['bots']:
        try:
            if games[id]['bots']['identeficator'] == text:
                no = 1
        except:
            pass
    if no == 0:
        return text
    else:
        return randomgen(id)


def createzombie(id):
    for ids in games:
        if id in games[ids]['bots']:
            id2 = games[ids]['chatid']
    x = randomgen(id2)
    t = users.find_one({'id': id})
    text = '–ó–æ–º–±–∏[' + t['bot']['name'] + ']'
    return createunit(id=id, name=text, weapon='zombiebite', energy=20, maxenergy=20, zombie=6, hp=1, maxhp=1,
                      identeficator=x)

def createunit(id, name, weapon, hp=4, maxhp=4, skills=[], identeficator=None, maxenergy=5, energy=5, items=[],
               accuracy=0, damagelimit=6, skin=[], \
               animal=None, zombie=0, die=0, shockcd=0, strenght=1, oracle=1, drops=[]):
    return {identeficator: {'name': name,
                            'dopname': None,
                            'weapon': weapon,
                            'mutations': [],
                            'effects': [],
                            'msg': None,
                            'skills': skills,
                            'team': None,
                            'hp': hp,
                            'shockcd': shockcd,
                            'maxenergy': maxenergy,
                            'energy': energy,
                            'items': items,
                            'attack': 0,
                            'yvorot': 0,
                            'reload': 0,
                            'skill': 0,
                            'item': 0,
                            'miss': 0,
                            'shield': 0,
                            'stun': 0,
                            'takendmg': 0,
                            'die': die,
                            'yvorotkd': 0,
                            'id': id,
                            'blood': 0,
                            'bought': [],
                            'accuracy': accuracy,
                            'damagelimit': damagelimit,
                            'zombie': zombie,
                            'heal': 0,
                            'shieldgen': 0,
                            'skin': skin,
                            'oracle': oracle,
                            'target': None,
                            'exp': 0,
                            'gipnoz': 0,
                            'maxhp': hp,
                            'currentarmor': 0,
                            'armorturns': 0,
                            'boundwith': None,
                            'boundtime': 0,
                            'boundacted': 0,
                            'bowcharge': 0,
                            'mainitem': [],
                            'weapons': ['hand'],
                            'animal': animal,
                            'allrounddmg': 0,
                            'deffromgun': 0,
                            'dieturn': 0,
                            'magicshieldkd': 0,
                            'fire': 0,
                            'firearmor': 0,
                            'identeficator': identeficator,
                            'chance': 0,
                            'hit': 0,
                            'doptext': '',
                            'dopdmg': 0,
                            'blight': 0,
                            'reservenergy': 0,
                            'realid': None,
                            'strenght': strenght,
                            'drops': drops,
                            'firearmorkd': 0,
                            'mainskill': []
                            }
            }

def skintoname(x):
    try:
        if x[0] == 'oracle':
            return '–û—Ä–∞–∫—É–ª'
        if x[0] == 'robot':
            return '–†–æ–±–æ—Ç'
        if x[0] == 'oldman':
            return '–ú—É–¥—Ä–µ—Ü'
    except:
        return '–Ω–∏—á–µ–≥–æ'


def weapontoname(x):
    if x == 'saw':
        return '–ü–∏–ª–æ—Å—Ç—Ä–µ–ª'
    elif x == 'ak':
        return '–ü–∏—Å—Ç–æ–ª–µ—Ç'
    elif x == 'bow':
        return '–õ—É–∫'
    elif x == None:
        return '–ö—É–ª–∞–∫–∏'
    elif x == 'rock':
        return '–ö–∞–º–µ–Ω—å'
    elif x == 'chlen':
        return '–§–ª—é–≥–µ–≥–µ–Ω—Ö–∞–π–º–µ–Ω'
    elif x == 'hand':
        return '–ö—É–ª–∞–∫–∏'
    elif x == 'kinzhal':
        return '–ö–∏–Ω–∂–∞–ª'
    elif x == 'slizgun':
        return '–°–ª–∏–∑–µ–º—ë—Ç'
    elif x == 'emojthrow':
        return '–≠–º–æ–¥–∂–∏–º—ë—Ç'


def infomenu(user):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('üê∫–û–±–æ—Ä–æ—Ç–µ–Ω—å', callback_data='dna info werewolf'),
           types.InlineKeyboardButton(text='‚ö°Ô∏è–≠–ª–µ–∫—Ç—Ä–æ–¥–µ–º–æ–Ω', callback_data='dna info electro'))
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='dna back1'))
    bot.send_message(user['id'], '–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', reply_markup=kb)


def dnamenu(user):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('üè¢–°—Ç—Ä–æ–µ–Ω–∏—è', callback_data='dna buildings'),
           types.InlineKeyboardButton(text='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è üß¨–î–ù–ö', callback_data='dna buy'))
    kb.add(types.InlineKeyboardButton('üìÄ–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='dna cloning'),
           types.InlineKeyboardButton('üë®‚Äçüî¨–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', callback_data='dna research'))
    kb.add(types.InlineKeyboardButton('üß™–ú—É—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='dna mutate'),
           types.InlineKeyboardButton('–ò–Ω—Ñ–∞ –æ –º—É—Ç–∞—Ü–∏—è—Ö', callback_data='dna info'))
    kb.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='close'))
    bot.send_message(user['id'], '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é.', reply_markup=kb)


def buildmenu(user):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('üè≠–î–ù–ö-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', callback_data='dna generator'),
           types.InlineKeyboardButton('üìÄ–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç–µ–ª—å', callback_data='dna cloner'))
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='dna back1'))
    kb.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='close'))
    bot.send_message(user['id'], '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ.', reply_markup=kb)


def researchmenu(user):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('üî•‚ö°Ô∏è–ú—É—Ç–∞—Ü–∏–∏', callback_data='dna mutations'))
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='dna back1'))
    kb.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='close'))
    bot.send_message(user['id'], '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é.', reply_markup=kb)

